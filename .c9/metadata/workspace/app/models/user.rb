{"changed":true,"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","value":"class User < ActiveRecord::Base\n  TEMP_EMAIL_PREFIX = 'change@me'\n  TEMP_EMAIL_REGEX = /\\Achange@me/\n  \n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable,# :confirmable,\n    :recoverable, :rememberable, :trackable, :validatable, :omniauthable\n\n  validates_format_of :email, :without => TEMP_EMAIL_REGEX, on: :update\n  validates_presence_of :first_name,:email\n  \n  has_many :pins , dependent: :destroy\n  \n  \n  def fullname\n        \"#{self.first_name}  #{self.last_name}\"\n  end\n  \n  def self.find_for_oauth(auth, signed_in_resource = nil)\n\n    # Get the identity and user if they exist\n    identity = Identity.find_for_oauth(auth)\n\n    # If a signed_in_resource is provided it always overrides the existing user\n    # to prevent the identity being locked with accidentally created accounts.\n    # Note that this may leave zombie accounts (with no associated identity) which\n    # can be cleaned up at a later date.\n    user = signed_in_resource ? signed_in_resource : identity.user\n\n    # Create the user if needed\n    if user.nil?\n\n      # Get the existing user by email if the provider gives us a verified email.\n      # If no verified email was provided we assign a temporary email and ask the\n      # user to verify it on the next step via UsersController.finish_signup\n      email_is_verified = auth.info.email && (auth.info.verified || auth.info.verified_email)\n      email = auth.info.email if email_is_verified\n      user = User.where(:email => email).first if email\n\n      # Create the user if it's a new registration\n      if user.nil?\n        user = User.new(\n          first_name: auth.extra.raw_info.name,\n          #username: auth.info.nickname || auth.uid,\n          email: email ? email : \"#{TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com\",\n          password: Devise.friendly_token[0,20]\n        )\n       # user.skip_confirmation!\n        user.save!\n      end\n    end\n\n    # Associate the identity with the user if needed\n    if identity.user != user\n      identity.user = user\n      identity.save!\n    end\n    user\n  end\n\n  def email_verified?\n    self.email && self.email !~ TEMP_EMAIL_REGEX\n  end\nend\n","undoManager":{"mark":0,"position":23,"stack":[[{"group":"doc","deltas":[{"start":{"row":14,"column":2},"end":{"row":21,"column":2},"action":"remove","lines":["def set_full_name","     if self.first_name.present? && (self.first_name.split(\" \").length == 2)","        self.first_name = self.first_name.split(\" \").first","        self.last_name ||=  self.first_name.split(\" \").last ","     end","     # self.full_name= \"#{self.first_name}  #{self.last_name}\"","  end  ","  "]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["v"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["e"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["e"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":["e"]}]}]]},"ace":{"folds":[],"scrolltop":470,"scrollleft":0,"selection":{"start":{"row":60,"column":0},"end":{"row":60,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":35,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1420974556617}